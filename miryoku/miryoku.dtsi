// Copyright 2022 Manna Harbour
// https://github.com/manna-harbour/miryoku

#include <behaviors.dtsi>
#include <behaviors/mouse_key_press.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#if defined (MIRYOKU_KLUDGE_MOUSEKEYSPR)
#include <behaviors/mouse_move.dtsi>
#include <behaviors/mouse_scroll.dtsi>
#endif
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/ext_power.h>

#include "miryoku.h"

#include <dt-bindings/zmk/mouse.h>




/ {
	
&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };
	
&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };
	
	&msc {
		acceleration-exponent = <1>;
		time-to-max-speed-ms = <100>;
		delay-ms = <0>;
	};
	
	&mmv {
		time-to-max-speed-ms = <500>;
		acceleration-exponent = <1>;
		trigger-period-ms = <16>;
	};
	
	rgb_encoder: rgb_encoder {
		compatible = "zmk,behavior-sensor-rotate";
		#sensor-binding-cells = <0>;
		bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
	};
	
	scroll_encoder: scroll_encoder {
		compatible = "zmk,behavior-sensor-rotate";
		#sensor-binding-cells = <0>;
		bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;
		tap-ms = <30>;
	};
	
	undo_redo_encoder: undo_redo_encoder {
		compatible = "zmk,behavior-sensor-rotate";
		#sensor-binding-cells = <0>;
		bindings = <&inc_dec_kp U_UND U_RDO>; \
		tap-ms = <30>;
	};
	
	volume_encoder: volume_encoder {
		compatible = "zmk,behavior-sensor-rotate";
		#sensor-binding-cells = <0>;
		bindings = <&inc_dec_kp C_VOLUME_DOWN C_VOL_UP>; \
		tap-ms = <30>;
	};
	
	left_right_encoder: left_right_encoder {
		compatible = "zmk,behavior-sensor-rotate";
		#sensor-binding-cells = <0>;
		bindings = <&inc_dec_kp LEFT RIGHT>; \
		tap-ms = <30>;
	};
	
	keymap {
		compatible = "zmk,keymap";
		#define MIRYOKU_X(LAYER, STRING, EXTRA) \
		LAYER { \
			display-name = STRING; \
			bindings = < U_MACRO_VA_ARGS(MIRYOKU_LAYERMAPPING_##LAYER, MIRYOKU_LAYER_##LAYER) >; \
			EXTRA \
		};
		MIRYOKU_LAYER_LIST
		#undef MIRYOKU_X
	};
};

#include "miryoku_shift_functions.dtsi"

#include "miryoku_double_tap_guard.dtsi"

#if defined (MIRYOKU_KLUDGE_MOUSEKEYSPR)
#include "miryoku_kludge_mousekeyspr.dtsi"
#else
#include "miryoku_mousekeys.dtsi"
#endif

#if defined (MIRYOKU_KLUDGE_THUMBCOMBOS)
#include "miryoku_kludge_thumbcombos.dtsi"
#endif

#if defined (MIRYOKU_KLUDGE_TOPROWCOMBOS)
#include "miryoku_kludge_toprowcombos.dtsi"
#endif

#if defined (MIRYOKU_KLUDGE_BOTTOMROWCOMBOS)
#include "miryoku_kludge_bottomrowcombos.dtsi"
#endif

#if defined (MIRYOKU_KLUDGE_TAPDELAY)
#include "miryoku_kludge_tapdelay.dtsi"
#else
#include "miryoku_behaviors.dtsi"
#endif
